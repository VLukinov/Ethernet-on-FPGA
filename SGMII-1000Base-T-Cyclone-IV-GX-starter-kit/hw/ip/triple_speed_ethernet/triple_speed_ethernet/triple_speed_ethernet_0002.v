// triple_speed_ethernet_0002.v

// This file was auto-generated from altera_eth_tse_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 593

`timescale 1 ps / 1 ps
module triple_speed_ethernet_0002 (
		input  wire        ref_clk,          //  pcs_ref_clk_clock_connection.clk
		input  wire        gxb_cal_blk_clk,  //                   cal_blk_clk.clk
		input  wire        clk,              // control_port_clock_connection.clk
		input  wire        reset,            //              reset_connection.reset
		input  wire [4:0]  reg_addr,         //                  control_port.address
		output wire [15:0] reg_data_out,     //                              .readdata
		input  wire        reg_rd,           //                              .read
		input  wire [15:0] reg_data_in,      //                              .writedata
		input  wire        reg_wr,           //                              .write
		output wire        reg_busy,         //                              .waitrequest
		output wire        tx_clk,           // pcs_transmit_clock_connection.clk
		output wire        rx_clk,           //  pcs_receive_clock_connection.clk
		input  wire        reset_tx_clk,     // pcs_transmit_reset_connection.reset
		input  wire        reset_rx_clk,     //  pcs_receive_reset_connection.reset
		output wire        gmii_rx_dv,       //               gmii_connection.gmii_rx_dv
		output wire [7:0]  gmii_rx_d,        //                              .gmii_rx_d
		output wire        gmii_rx_err,      //                              .gmii_rx_err
		input  wire        gmii_tx_en,       //                              .gmii_tx_en
		input  wire [7:0]  gmii_tx_d,        //                              .gmii_tx_d
		input  wire        gmii_tx_err,      //                              .gmii_tx_err
		output wire        tx_clkena,        //       clock_enable_connection.tx_clkena
		output wire        rx_clkena,        //                              .rx_clkena
		output wire        mii_rx_dv,        //                mii_connection.mii_rx_dv
		output wire [3:0]  mii_rx_d,         //                              .mii_rx_d
		output wire        mii_rx_err,       //                              .mii_rx_err
		input  wire        mii_tx_en,        //                              .mii_tx_en
		input  wire [3:0]  mii_tx_d,         //                              .mii_tx_d
		input  wire        mii_tx_err,       //                              .mii_tx_err
		output wire        mii_col,          //                              .mii_col
		output wire        mii_crs,          //                              .mii_crs
		output wire        set_10,           //       sgmii_status_connection.set_10
		output wire        set_1000,         //                              .set_1000
		output wire        set_100,          //                              .set_100
		output wire        hd_ena,           //                              .hd_ena
		output wire        led_crs,          //         status_led_connection.crs
		output wire        led_link,         //                              .link
		output wire        led_panel_link,   //                              .panel_link
		output wire        led_col,          //                              .col
		output wire        led_an,           //                              .an
		output wire        led_char_err,     //                              .char_err
		output wire        led_disp_err,     //                              .disp_err
		output wire        rx_recovclkout,   //     serdes_control_connection.rx_recovclkout
		input  wire        reconfig_clk,     //                              .reconfig_clk
		input  wire [3:0]  reconfig_togxb,   //                              .reconfig_togxb
		output wire [4:0]  reconfig_fromgxb, //                              .reconfig_fromgxb
		input  wire        reconfig_busy,    //                              .reconfig_busy
		output wire        txp,              //             serial_connection.txp
		input  wire        rxp               //                              .rxp
	);

	wire        i_altgxb_0_gxb_pwrdn_in_to_pcs_export;           // i_altgxb_0:gxb_pwrdn_in_to_pcs -> i_tse_pcs_0:gxb_pwrdn_in_to_pcs
	wire        i_altgxb_0_rx_pcs_clk_export;                    // i_altgxb_0:rx_pcs_clk -> i_tse_pcs_0:rx_pcs_clk
	wire        i_tse_pcs_0_sd_loopback_export;                  // i_tse_pcs_0:sd_loopback -> i_altgxb_0:sd_loopback
	wire        i_altgxb_0_rx_freqlocked_export;                 // i_altgxb_0:rx_freqlocked -> i_tse_pcs_0:rx_freqlocked
	wire        i_altgxb_0_rx_disp_err_export;                   // i_altgxb_0:rx_disp_err -> i_tse_pcs_0:rx_disp_err
	wire        i_altgxb_0_rx_runningdisp_export;                // i_altgxb_0:rx_runningdisp -> i_tse_pcs_0:rx_runningdisp
	wire        i_altgxb_0_tx_pcs_clk_export;                    // i_altgxb_0:tx_pcs_clk -> i_tse_pcs_0:tx_pcs_clk
	wire        i_tse_pcs_0_rx_digitalreset_sqcnr_rx_clk_export; // i_tse_pcs_0:rx_digitalreset_sqcnr_rx_clk -> i_altgxb_0:rx_digitalreset_sqcnr_rx_clk
	wire        i_tse_pcs_0_rx_analogreset_sqcnr_export;         // i_tse_pcs_0:rx_analogreset_sqcnr -> i_altgxb_0:rx_analogreset_sqcnr
	wire  [7:0] i_altgxb_0_rx_frame_export;                      // i_altgxb_0:rx_frame -> i_tse_pcs_0:rx_frame
	wire        i_altgxb_0_rx_rmfifodatadeleted_export;          // i_altgxb_0:rx_rmfifodatadeleted -> i_tse_pcs_0:rx_rmfifodatadeleted
	wire        i_altgxb_0_rx_runlengthviolation_export;         // i_altgxb_0:rx_runlengthviolation -> i_tse_pcs_0:rx_runlengthviolation
	wire        i_altgxb_0_rx_char_err_gx_export;                // i_altgxb_0:rx_char_err_gx -> i_tse_pcs_0:rx_char_err_gx
	wire  [7:0] i_tse_pcs_0_tx_frame_export;                     // i_tse_pcs_0:tx_frame -> i_altgxb_0:tx_frame
	wire        i_tse_pcs_0_tx_digitalreset_sqcnr_tx_clk_export; // i_tse_pcs_0:tx_digitalreset_sqcnr_tx_clk -> i_altgxb_0:tx_digitalreset_sqcnr_tx_clk
	wire        i_tse_pcs_0_pcs_pwrdn_out_from_pcs_export;       // i_tse_pcs_0:pcs_pwrdn_out_from_pcs -> i_altgxb_0:pcs_pwrdn_out_from_pcs
	wire        i_altgxb_0_rx_patterndetect_export;              // i_altgxb_0:rx_patterndetect -> i_tse_pcs_0:rx_patterndetect
	wire        i_altgxb_0_pll_locked_export;                    // i_altgxb_0:pll_locked -> i_tse_pcs_0:pll_locked
	wire        i_altgxb_0_rx_syncstatus_export;                 // i_altgxb_0:rx_syncstatus -> i_tse_pcs_0:rx_syncstatus
	wire        i_altgxb_0_rx_kchar_export;                      // i_altgxb_0:rx_kchar -> i_tse_pcs_0:rx_kchar
	wire        i_altgxb_0_rx_rmfifodatainserted_export;         // i_altgxb_0:rx_rmfifodatainserted -> i_tse_pcs_0:rx_rmfifodatainserted
	wire        i_tse_pcs_0_tx_kchar_export;                     // i_tse_pcs_0:tx_kchar -> i_altgxb_0:tx_kchar
	wire        i_altgxb_0_reconfig_busy_to_pcs_export;          // i_altgxb_0:reconfig_busy_to_pcs -> i_tse_pcs_0:reconfig_busy_to_pcs

	altera_eth_tse_pcs_pma_gxb #(
		.DEV_VERSION        (4353),
		.DEVICE_FAMILY      ("CYCLONEIVGX"),
		.SYNCHRONIZER_DEPTH (3),
		.ENABLE_CLK_SHARING (0),
		.ENABLE_SGMII       (1),
		.PHY_IDENTIFIER     (0)
	) i_tse_pcs_0 (
		.gxb_pwrdn_in_to_pcs          (i_altgxb_0_gxb_pwrdn_in_to_pcs_export),           //           gxb_pwrdn_in_to_pcs.export
		.rx_pcs_clk                   (i_altgxb_0_rx_pcs_clk_export),                    //                    rx_pcs_clk.export
		.sd_loopback                  (i_tse_pcs_0_sd_loopback_export),                  //                   sd_loopback.export
		.rx_freqlocked                (i_altgxb_0_rx_freqlocked_export),                 //                 rx_freqlocked.export
		.rx_disp_err                  (i_altgxb_0_rx_disp_err_export),                   //                   rx_disp_err.export
		.rx_runningdisp               (i_altgxb_0_rx_runningdisp_export),                //                rx_runningdisp.export
		.tx_pcs_clk                   (i_altgxb_0_tx_pcs_clk_export),                    //                    tx_pcs_clk.export
		.rx_digitalreset_sqcnr_rx_clk (i_tse_pcs_0_rx_digitalreset_sqcnr_rx_clk_export), //  rx_digitalreset_sqcnr_rx_clk.export
		.rx_analogreset_sqcnr         (i_tse_pcs_0_rx_analogreset_sqcnr_export),         //          rx_analogreset_sqcnr.export
		.rx_frame                     (i_altgxb_0_rx_frame_export),                      //                      rx_frame.export
		.rx_rmfifodatadeleted         (i_altgxb_0_rx_rmfifodatadeleted_export),          //          rx_rmfifodatadeleted.export
		.rx_runlengthviolation        (i_altgxb_0_rx_runlengthviolation_export),         //         rx_runlengthviolation.export
		.rx_char_err_gx               (i_altgxb_0_rx_char_err_gx_export),                //                rx_char_err_gx.export
		.tx_frame                     (i_tse_pcs_0_tx_frame_export),                     //                      tx_frame.export
		.tx_digitalreset_sqcnr_tx_clk (i_tse_pcs_0_tx_digitalreset_sqcnr_tx_clk_export), //  tx_digitalreset_sqcnr_tx_clk.export
		.pcs_pwrdn_out_from_pcs       (i_tse_pcs_0_pcs_pwrdn_out_from_pcs_export),       //        pcs_pwrdn_out_from_pcs.export
		.rx_patterndetect             (i_altgxb_0_rx_patterndetect_export),              //              rx_patterndetect.export
		.pll_locked                   (i_altgxb_0_pll_locked_export),                    //                    pll_locked.export
		.rx_syncstatus                (i_altgxb_0_rx_syncstatus_export),                 //                 rx_syncstatus.export
		.rx_kchar                     (i_altgxb_0_rx_kchar_export),                      //                      rx_kchar.export
		.rx_rmfifodatainserted        (i_altgxb_0_rx_rmfifodatainserted_export),         //         rx_rmfifodatainserted.export
		.tx_kchar                     (i_tse_pcs_0_tx_kchar_export),                     //                      tx_kchar.export
		.reconfig_busy_to_pcs         (i_altgxb_0_reconfig_busy_to_pcs_export),          //          reconfig_busy_to_pcs.export
		.clk                          (clk),                                             // control_port_clock_connection.clk
		.reset                        (reset),                                           //              reset_connection.reset
		.reg_addr                     (reg_addr),                                        //                  control_port.address
		.reg_data_out                 (reg_data_out),                                    //                              .readdata
		.reg_rd                       (reg_rd),                                          //                              .read
		.reg_data_in                  (reg_data_in),                                     //                              .writedata
		.reg_wr                       (reg_wr),                                          //                              .write
		.reg_busy                     (reg_busy),                                        //                              .waitrequest
		.ref_clk                      (ref_clk),                                         //  pcs_ref_clk_clock_connection.clk
		.tx_clkena                    (tx_clkena),                                       //       clock_enable_connection.tx_clkena
		.rx_clkena                    (rx_clkena),                                       //                              .rx_clkena
		.gmii_rx_dv                   (gmii_rx_dv),                                      //               gmii_connection.gmii_rx_dv
		.gmii_rx_d                    (gmii_rx_d),                                       //                              .gmii_rx_d
		.gmii_rx_err                  (gmii_rx_err),                                     //                              .gmii_rx_err
		.gmii_tx_en                   (gmii_tx_en),                                      //                              .gmii_tx_en
		.gmii_tx_d                    (gmii_tx_d),                                       //                              .gmii_tx_d
		.gmii_tx_err                  (gmii_tx_err),                                     //                              .gmii_tx_err
		.mii_rx_dv                    (mii_rx_dv),                                       //                mii_connection.mii_rx_dv
		.mii_rx_d                     (mii_rx_d),                                        //                              .mii_rx_d
		.mii_rx_err                   (mii_rx_err),                                      //                              .mii_rx_err
		.mii_tx_en                    (mii_tx_en),                                       //                              .mii_tx_en
		.mii_tx_d                     (mii_tx_d),                                        //                              .mii_tx_d
		.mii_tx_err                   (mii_tx_err),                                      //                              .mii_tx_err
		.mii_col                      (mii_col),                                         //                              .mii_col
		.mii_crs                      (mii_crs),                                         //                              .mii_crs
		.set_10                       (set_10),                                          //       sgmii_status_connection.set_10
		.set_1000                     (set_1000),                                        //                              .set_1000
		.set_100                      (set_100),                                         //                              .set_100
		.hd_ena                       (hd_ena),                                          //                              .hd_ena
		.tx_clk                       (tx_clk),                                          // pcs_transmit_clock_connection.clk
		.rx_clk                       (rx_clk),                                          //  pcs_receive_clock_connection.clk
		.reset_tx_clk                 (reset_tx_clk),                                    // pcs_transmit_reset_connection.reset
		.reset_rx_clk                 (reset_rx_clk),                                    //  pcs_receive_reset_connection.reset
		.led_crs                      (led_crs),                                         //         status_led_connection.export
		.led_link                     (led_link),                                        //                              .export
		.led_panel_link               (led_panel_link),                                  //                              .export
		.led_col                      (led_col),                                         //                              .export
		.led_an                       (led_an),                                          //                              .export
		.led_char_err                 (led_char_err),                                    //                              .export
		.led_disp_err                 (led_disp_err)                                     //                              .export
	);

	altera_tse_altgxb #(
		.DEVICE_FAMILY           ("CYCLONEIVGX"),
		.STARTING_CHANNEL_NUMBER (0),
		.ENABLE_ALT_RECONFIG     (1),
		.ENABLE_SGMII            (1),
		.RECONFIG_TOGXB_WIDTH    (4),
		.RECONFIG_FROMGXB_WIDTH  (5)
	) i_altgxb_0 (
		.rx_digitalreset_sqcnr_rx_clk (i_tse_pcs_0_rx_digitalreset_sqcnr_rx_clk_export), // rx_digitalreset_sqcnr_rx_clk.export
		.rx_syncstatus                (i_altgxb_0_rx_syncstatus_export),                 //                rx_syncstatus.export
		.rx_runlengthviolation        (i_altgxb_0_rx_runlengthviolation_export),         //        rx_runlengthviolation.export
		.rx_char_err_gx               (i_altgxb_0_rx_char_err_gx_export),                //               rx_char_err_gx.export
		.rx_freqlocked                (i_altgxb_0_rx_freqlocked_export),                 //                rx_freqlocked.export
		.tx_frame                     (i_tse_pcs_0_tx_frame_export),                     //                     tx_frame.export
		.rx_frame                     (i_altgxb_0_rx_frame_export),                      //                     rx_frame.export
		.tx_pcs_clk                   (i_altgxb_0_tx_pcs_clk_export),                    //                   tx_pcs_clk.export
		.pcs_pwrdn_out_from_pcs       (i_tse_pcs_0_pcs_pwrdn_out_from_pcs_export),       //       pcs_pwrdn_out_from_pcs.export
		.pll_locked                   (i_altgxb_0_pll_locked_export),                    //                   pll_locked.export
		.rx_analogreset_sqcnr         (i_tse_pcs_0_rx_analogreset_sqcnr_export),         //         rx_analogreset_sqcnr.export
		.rx_pcs_clk                   (i_altgxb_0_rx_pcs_clk_export),                    //                   rx_pcs_clk.export
		.gxb_pwrdn_in_to_pcs          (i_altgxb_0_gxb_pwrdn_in_to_pcs_export),           //          gxb_pwrdn_in_to_pcs.export
		.rx_rmfifodatainserted        (i_altgxb_0_rx_rmfifodatainserted_export),         //        rx_rmfifodatainserted.export
		.tx_kchar                     (i_tse_pcs_0_tx_kchar_export),                     //                     tx_kchar.export
		.rx_kchar                     (i_altgxb_0_rx_kchar_export),                      //                     rx_kchar.export
		.rx_patterndetect             (i_altgxb_0_rx_patterndetect_export),              //             rx_patterndetect.export
		.reconfig_busy_to_pcs         (i_altgxb_0_reconfig_busy_to_pcs_export),          //         reconfig_busy_to_pcs.export
		.sd_loopback                  (i_tse_pcs_0_sd_loopback_export),                  //                  sd_loopback.export
		.tx_digitalreset_sqcnr_tx_clk (i_tse_pcs_0_tx_digitalreset_sqcnr_tx_clk_export), // tx_digitalreset_sqcnr_tx_clk.export
		.rx_disp_err                  (i_altgxb_0_rx_disp_err_export),                   //                  rx_disp_err.export
		.rx_runningdisp               (i_altgxb_0_rx_runningdisp_export),                //               rx_runningdisp.export
		.rx_rmfifodatadeleted         (i_altgxb_0_rx_rmfifodatadeleted_export),          //         rx_rmfifodatadeleted.export
		.ref_clk                      (ref_clk),                                         // pcs_ref_clk_clock_connection.clk
		.rx_recovclkout               (rx_recovclkout),                                  //    serdes_control_connection.export
		.reconfig_clk                 (reconfig_clk),                                    //                             .export
		.reconfig_togxb               (reconfig_togxb),                                  //                             .export
		.reconfig_fromgxb             (reconfig_fromgxb),                                //                             .export
		.reconfig_busy                (reconfig_busy),                                   //                             .export
		.txp                          (txp),                                             //            serial_connection.export
		.rxp                          (rxp),                                             //                             .export
		.gxb_cal_blk_clk              (gxb_cal_blk_clk),                                 //                  cal_blk_clk.clk
		.gxb_pwrdn_in                 (1'b0),                                            //                  (terminated)
		.pcs_pwrdn_out                ()                                                 //                  (terminated)
	);

endmodule
